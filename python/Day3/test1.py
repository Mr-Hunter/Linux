#!/usr/bin/python
#coding:utf-8
'''
基础语法

'''

#换行
#1，小括号，中括号，大括号的程序，可以跨行 【字典，元组，列表】
ser = {
    '22':"2323",
    '444':"45456"
}
list1 = [1,2,3,
         4,45,6]
#2,  \ 告诉编译器下面还有一行
TestA = 1
TestB = 2

if TestA != \
        TestB \
        :
        print "nihao"
#3，对于字符串来说，单引号、双引号声明的字符串不能换行，
#三引号里面是啥就是打印啥，内容换行时自动添加换行符，不推荐使用

#缩进规范：
#同一代码块只能一个缩进，四个空格为一个缩进，必须保证严格的缩进

#多元赋值
#解决两值交换
x,y = 1,2
print x,y
x,y = y,x
print x,y

#增量赋值
#+=  -=  *=  /= ....

#作用域与生命周期
'''
#def class lamda 会改变变量的作用域
#if,else,elif,while,for,try/catch不会改变变量的作用域
#内建函数 globals() 返回了当前环境全局作用域所有变量
#内建函数 locals()返回了当前环境局部作用域的变量
#print globals()
#python对于变量的生命周期不需要程序员操心，因为垃圾回收机制gc
#会自动识别一个变量的生命周期是否到尽头，并自动释放空间

'''

#特殊标识符
'''
#_作为变量的前缀与后缀，表示特殊的标识符
#_xxx 表示一个私有变量(方法名)，from module import * 无法导入，会忽略私有（_xxx）
#但是没有绝对的私有，，使用from module import _xxx即可（强行引入加_的标识符）
#_xxx_、__xxx__一般系统定义变量的名字，我们自己定义时要尽量与系统的分别开，防止冲突

'''
#文档字符串
'''
#  #单行注释
#  ''' ''' 多行注释，，也称文档字符串
#函数的doc属性：函数在函数名下一行使用文档字符串，表示本函数的大意
#打印函数doc属性：print Add.add.__doc__   ,doc属性类型：type检验是字符，
#如果没有注释函数，打印函数注释（doc属性）：None
#模块注释：''' '''在模块最前面，打印模块的__doc__, print Add.__doc__
#函数注释第一行，模块最前面，否则解释器认为没有注释

'''
#对象
'''
#python可以说一切都是对象，Ruby语言比python更晚，更能够彻底的对象化，
#对象包含：身份：对象都有唯一的身份标识自己，使用内建函数id可以查看标识的值
#          类型：决定对象保存什么样的值，可以进行什么样的操作，以及遵守什么样的规则，内建函数type查看对象类型
#            值：表示对象存放的内容，有的对象额可以被修改，有的不可以被修改，这个称为对象的“可变性”

#判定任意类型的值是否为对象，id函数查看是否有id就好
#对象：一个字面常量，一个字符串，一个函数，一个类型，一个模块等等

'''
#理解对象与引用
'''
a=2
#c,先创建变量名a,a就是一个篮子（给a分配空间），然后将2放在这个篮子里
#python,首先一个integer class 被唤醒（找到整数对象的图纸），根据integer class这个图纸，
#在内存开辟一段空间（得到对象id），并填充对象的类型与值，房子建造完毕，这时候进入房子,a就是钥匙，
#再次b=2,b也拿到了值为2的房子的钥匙
'''
#总结
'''
python的变量名，只是一个访问对象的钥匙，多个不同的变量，完全可以访问相同的对象，因此这种变量名也叫对象的引用,
#为什么python的变量是这样，c/c++的差异那么大？
空间考虑：比如一个数字2，python中只要那么一个数字2，而c/c++中有很多的2
时间考虑：例如a=b的赋值，只是修改贴标签的位置，不需要对对象进行深浅拷贝，
为什么python可以呢？因为python的垃圾回收机制gc，是这样的设定的基础
'''

#############################理解对象与类型
'''
因为相似，所以将对象都归类，比如整数归为一类，浮点数归为一类，字符串归为一类
相同类型的对象，需有相同的操作，比如，所有的整数对象，都可以进行加减乘除操作，所有字符可以进行切片操作
python是一种动态强类型的编程语言
动态：运行时检测变量的类型
强类型：类型的严格检查，不支持即不允许隐式类型转换
类似的，C语言是一种静态弱类型语言，java的类型检查更为严格，一般认为是静态强类型，javascript是动态弱类型
eg:
    Static_Strong:java/c#Scala
    Static_Weak:c/c++
    Dynamic_strong:python/Ruby/Magik/Groovy/Erlang
    Dynamic_weak:vb/javascript/php
'''
#标准类型
'''
整形、浮点型、复数型、布尔型、字符串型、列表、元组（不可修改）、字典(key可以是很广泛的，一般数字，字符串，value一般类型都可以)
强制类型转换：a=1，------>    float(a)
'''
#其他内建类型
'''
类型、NULL对象（None）、文件、函数、模块、类
'''
#类型的类型
'''
类型也是对象，类型也是一种类型(type(type)/id(type)
'''
#认识None
'''
python的一种特殊类型，NoneType，这是类型的一个对象，叫做None，type(None)--->  NoneType;
NoneType类似于C语言的void，None类似于C语言的空指针NULL，None这个对象没有啥有用的属性，布尔值为False
'''
#内建类型的布尔值
'''
所有的标准对象，均可以用于布尔测试(放if条件中)

下面对象的布尔值是False：{None,False,所有值为0的数字(0,0.0,0.0+0.0j),""(空字符串)，()(空元祖)，{}（空字典）}
其他情况下，这些内建对象的布尔值就是True
'''
#对象值得比较
'''
所有内建类型对象都可以进行比较操作来进行值得比较（双方类型必须相同），python2这块还不够完善，不同类型可以进行比较的
比较运算结果为Treu、False
比较运算符包括==，!=,<,>,<=,>=
'''

#对象身份的比较
'''
对于变量名只是对象的一个引用，对于多个变量名是否指向同一对象可以用id函数来判断，如果id相同说明就是一个对象
python还提供 is  关键字 直接判断是否指向同一对象  print a is  b
另外，还有is not直接判断是否指向不同的对象 print a is not b

'''

#对象类型的比较
'''
对象比较类型是否相同，可以使用内建函数type（）
        print type(1) == type（1.1）
上面调用两次type，可以进行优化，一次肯定效率更高，
    import types
    a = 1
    print type(a) == types.IntType
python还提供了一个内建函数isinstance
    a=[]
    print isinstance(a,list)

    a = 100
    print isinstance(a,type(100))  第一个参数是对象或变量，，第二个参数是类型

'''
#类型工厂函数
'''

对于内建函数int(),将一个字符串转换为整数，其实调用int()之后，生成一个整形类型对象，称之为工厂函数，像生产货物一样
eg：int(),float(),complex(),str(),,,,,,

'''
#python不支持的类型
'''
char byte:可以使用长度为1 的字符串或整数代替
指针：python有垃圾回收机制gc，代替管理内存，虽然id()返回的值接近于指针的地址，但是不能主动修改
int、short、long:以前的版本是区分int、long的，后来统一在一起了，记住python的表示整数的范围，只取决于你机器内存的大小
float、double：python的float就是C语言的double，python认为没必要支持两者

'''

#数字与运算
'''
#整数运算
    左移，右移
    按位与或非
#常用内置模块/函数  import math
    abs：求绝对值
    divmod：返回一个元组，同时计算商与余数
    str:将数字转换为字符串
    round：对浮点数进行四舍五入，round有两个参数，第一个进行运算的值，第二个是保留小数点的尾数
        for count in range(10):
            print round(math.pi,count)   //常量圆周率，只有11位
    整数进制转换：oct(),hex(),返回值是一个字符串
    math、cmath模块：提供一些方便的数学运算的函数，math是常规数学运算，cmath是复数运算
    随机数random模块
'''
a,_ = divmod(10,3)  #函数多个返回值可以进行解包
print a
print round(1.221232,3)

#条件与循环
'''
#缩进与悬挂else
    c中，不带括号，else与最近的if匹配U
    python中严格遵循左对齐且缩进，只要在同一战线的即为一对
#条件表达式
    python没有？:三目运算符，因为python设计者认为这样不美观，取而代之的是一个叫条件表达式的东西，私认为这个更不美观
        x,y,small = 2,3,0
        if x<y:
            small = x
        else:
            small = y
        可以这样写：small = x if x< y else y
#与循环搭配的else
    count = 0
    while count<10:
        print count
        count+=1
    else:
        print "循环结束"
'''
#x = int(raw_input())
#y = int(raw_input())

#if x>0:
#    if y>0:
#        print "hehe"
#else:
#    print "linx"

#与循环搭配的else
count = 0
while count<10:
    print count
    count+=1
else:
    print "循环结束"

###################################函数与可调用对象
#函数定义与调用
'''
    使用def关键字定义一个函数，
        def Hell():
            print "hello"
    函数的定义只是创建了一个函数，并没有执行函数体的代码，在调用时才真正执行函数体代码，
    函数内部可以进行函数嵌套定义，函数也可以进行作为参数，函数作为函数的返回值
'''
#函数的参数
'''
    函数定义时，可以在（）中填入函数需要接受的哪些参数，不需要指定参数类型
    python是动态强类型语言，所以在写下代码的时候，解释器并不知道参数的类型，而是在运行时候知道的
    只要传的参，能够支持函数体的各种操作就好，否则运行时报错
    函数形参也可以设置默认值，调用时，实参也可以指定传参，这也就代替了函数重载，python无函数重载
'''
#关键字参数
'''
    当有多个默认参数时，同时又想传其中某几个的时候，还可以进行关键字传参，

    内建函数sorted()原型：sorted(iterable[,cmp[,key[,reverse]]]):作用是进行排序
    函数四个参数，第一个表示可迭代对象（列表，元组，字典等），剩余三个参数都具有默认的参数，可以不传参
    对于默认参数，可以通过现实的指定关键字，来说明接下来的这个参数是传给那个参数
    第二个是比较方法：是一个比较函数，函数接受两个参数，返回一个比较结果，比如比较两个a,b，大于，return 1 正数，相等 0 小于，return 负数 -1
    第三个key也是比较方法：传入一个遍历对象，返回一个相关值，根据相关值比较大小  比如根据长度：key = len
    第四个：默认增序，，默认False增序，True降序

    eg：list1.sort(),对原有进行排序，id不变
        sorted是产生中间产物，重新分配空间存储，id进行改变
'''
#参数组
'''
    可以将一个元组或字典，作为参数组传给函数，这样就实现了“可变长参数”,通过将参数名前加一个*，*之后表示一个元组
    实现一个打印日志的函数，这个函数第一个参数是一条日志的前缀，后续可能有N个参数，N个参数之间用\t分隔
        def Log（prefix，*data）：
            print prefix+‘\t’.join（data)
    为什么用分隔符呢？
        分隔后的文本，很方便的和linux的一些工具搭配使用，比如cut，sort，awk
        通过在参数名前加**，表述后面的是字典，这时候调用就可以按照关键字的方式传参了
'''
#sorted函数：排序（默认增序）
a= [1,2,3,45,5]
print sorted(a)

#日志函数(元组)
print "元组日志"
def Log(prefix,*data):
    #join：用来连接字符串列表，‘-’.jn():表示用‘‘连接
    print prefix+'\t'.join(data)
    print data
Log("[Notice]:","saxasxas","xasxasxasccccdcd")
#日志函数(字典)
print "字典日日志"
def Logz(prefix,**data):
    #join：用来连接字符串列表，‘-’.jn():表示用‘‘连接
    print prefix+'\t'.join(data.values())
    print data
Logz("[Notice]:",ip = "11.1.1.11.1",host = "ww.ww.sssc.com")

#字典打印
dict1 = {"ip":"122.22.22.22","host":"www.bai.cc"}
print "字典测试"
print dict1.keys()
print dict1.values()
print dict1.items()  #每个键值对是一个元组，所有键值对（元组）构成列表，打印出列表



#函数重载？
'''
python没有函数重载，那么出现两个名字相同的函数，结果是：只有最后一个有效
'''
def Func():
    print "我是第一个"
def Func():#有效
    print "我是老二"

print Func()#没有return，默认返回None

#函数的返回值
'''
通过return返回一个对象
如果没有return语句，则返回是的None对象
可以在一个函数中返回多个对象，本质返回的是一个元组，可以通过分隔符接收需要用的值
'''
#函数的内置属性
'''
函数也是一个对象，通过内建函数dir可以看到一个函数的属性列表
'''
print "函数属性"
print dir(Func)

#函数也可以是一个对象，也可以作为函数的参数
#函数也可以作为一个函数的返回值
'''
一个函数在另外一个函数内部定义，也可以作为一个返回值返回出去

'''
def do():
    def Rerturn():
        print "haha"
    return Return()

#可调用对象
'''
类似于函数这样的对象，可以进行调用执行一段代码，这种对象称为可调用对象
'''

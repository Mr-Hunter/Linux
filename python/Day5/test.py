#!/usr/bin/python
#coding:utf-8

'''
文件操作
'''

##########文件基础操作
#打开关闭文件
'''
内建函数open，能够打开指定路径的文件
open最常用两个参数,d第一个文件名，第二个打开方式
r/w/a/b :读/写/追加/二进制

'''
#关于内建函数
'''
内建函数包含在 __builtins__ 这个模块里面
这个模块python解释器自动包含
dir(__builtins__)可以看到python中一共有哪些内建函数
'''
#print dir(__builtins__)

#文件对象
'''
python的文件对象，其中也包含了文件描述符，同时也包含了一些其他的属性，本质上也是通过文件描述符完成对文件的读写
对象包含文件描述符，我们知道，一个进程可操作的文件描述符的数目是有上限的，因此用了之后立马关闭
当文件对象被垃圾机制回收销毁时，也会同时释放文件描述符
f= open("text.txt","r")
f.close()
当文件打开失败时，就会执行出错
'''
#读
#f = open("Text.txt","r")
#f.read(3)
#f.readline()
#data = f.readlines()
#print data
#f.close()

#写
#f=open("Text.txt","w")
#f.write("hello\nlinu\npython")
#f.writeline()
#f.close()

#读写缓存区
'''
python文件读写可带缓存区，也可不带缓存区
在使用open函数打开文件的时候，其实还有第三个参数，可以指定是否使用缓存区，以及缓冲区的大小，flush可以刷新缓存区
写入文件：
1，flush
2. close
3，缓存区满
'''

#文件操作指针
'''
文件具备随机访问能力，这个过程需要文件指针完成
seek：将文件指针移动到文件开头算起的第几个字节上，有两个参数，第一个参数offset表示偏移的字节数，
    第二个参数whence表示偏移量的起始位置在哪，值为0，表示从开头计算，值为1，表示当前位置，值为2表示文件结尾
tell：获取当前文件指针指向的位置，返回当前位置到文件开头的偏移
'''
#f.seek(10)
#f.seek(-22,2)  在最后往前偏移22字节
#f.tell() //22


#文件对象的内建属性

#with语句和上下文管理
'''
用完就要关闭，否则出现句柄泄漏
但是非常繁琐忘记关闭了怎么办？
c++中智能指针进行解决，python对象回收取决于gc机制，并不像c++那么时效性强
所以引入了上下文管理器来解决

在with语句块内进行文件操作，当文件操作完毕后，出了with外，就会自动执行关闭操作
一个支持上下文协议的对象才能被应用于with中，我们成这样的对象为上下文管理器，pythoon的很多对象都是上下文管理器，例如文件对象，线程锁对象

'''
with open("Text","r") as f:
    data = f.readlines()
    print data
print "文件已经自动关闭"

#应用：基于一个简单文本，构造一个大文本，（构造测试数据）
#应用：按页读取大文本内容
#详见其他.py文件




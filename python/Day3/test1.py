#!/usr/bin/python
#coding:utf-8
'''
基础语法

'''

#换行
#1，小括号，中括号，大括号的程序，可以跨行 【字典，元组，列表】
ser = {
    '22':"2323",
    '444':"45456"
}
list1 = [1,2,3,
         4,45,6]
#2,  \ 告诉编译器下面还有一行
TestA = 1
TestB = 2

if TestA != \
        TestB \
        :
        print "nihao"
#3，对于字符串来说，单引号、双引号声明的字符串不能换行，
#三引号里面是啥就是打印啥，内容换行时自动添加换行符，不推荐使用

#缩进规范：
#同一代码块只能一个缩进，四个空格为一个缩进，必须保证严格的缩进

#多元赋值
#解决两值交换
x,y = 1,2
print x,y
x,y = y,x
print x,y

#增量赋值
#+=  -=  *=  /= ....

#作用域与生命周期
'''
#def class lamda 会改变变量的作用域
#if,else,elif,while,for,try/catch不会改变变量的作用域
#内建函数 globals() 返回了当前环境全局作用域所有变量
#内建函数 locals()返回了当前环境局部作用域的变量
#print globals()
#python对于变量的生命周期不需要程序员操心，因为垃圾回收机制gc
#会自动识别一个变量的生命周期是否到尽头，并自动释放空间

'''

#特殊标识符
'''
#_作为变量的前缀与后缀，表示特殊的标识符
#_xxx 表示一个私有变量(方法名)，from module import * 无法导入，会忽略私有（_xxx）
#但是没有绝对的私有，，使用from module import _xxx即可（强行引入加_的标识符）
#_xxx_、__xxx__一般系统定义变量的名字，我们自己定义时要尽量与系统的分别开，防止冲突

'''
#文档字符串
'''
#  #单行注释
#  ''' ''' 多行注释，，也称文档字符串
#函数的doc属性：函数在函数名下一行使用文档字符串，表示本函数的大意
#打印函数doc属性：print Add.add.__doc__   ,doc属性类型：type检验是字符，
#如果没有注释函数，打印函数注释（doc属性）：None
#模块注释：''' '''在模块最前面，打印模块的__doc__, print Add.__doc__
#函数注释第一行，模块最前面，否则解释器认为没有注释

'''
#对象
'''
#python可以说一切都是对象，Ruby语言比python更晚，更能够彻底的对象化，
#对象包含：身份：对象都有唯一的身份标识自己，使用内建函数id可以查看标识的值
#          类型：决定对象保存什么样的值，可以进行什么样的操作，以及遵守什么样的规则，内建函数type查看对象类型
#            值：表示对象存放的内容，有的对象额可以被修改，有的不可以被修改，这个称为对象的“可变性”

#判定任意类型的值是否为对象，id函数查看是否有id就好
#对象：一个字面常量，一个字符串，一个函数，一个类型，一个模块等等

'''
#理解对象与引用
'''
a=2
#c,先创建变量名a,a就是一个篮子（给a分配空间），然后将2放在这个篮子里
#python,首先一个integer class 被唤醒（找到整数对象的图纸），根据integer class这个图纸，
#在内存开辟一段空间（得到对象id），并填充对象的类型与值，房子建造完毕，这时候进入房子,a就是钥匙，
#再次b=2,b也拿到了值为2的房子的钥匙
'''
#总结
'''
python的变量名，只是一个访问对象的钥匙，多个不同的变量，完全可以访问相同的对象，因此这种变量名也叫对象的引用,
#为什么python的变量是这样，c/c++的差异那么大？
空间考虑：比如一个数字2，python中只要那么一个数字2，而c/c++中有很多的2
时间考虑：例如a=b的赋值，只是修改贴标签的位置，不需要对对象进行深浅拷贝，
为什么python可以呢？因为python的垃圾回收机制gc，是这样的设定的基础
'''

#理解对象与类型
'''
因为相似，所以将对象都归类，比如整数归为一类，浮点数归为一类，字符串归为一类
相同类型的对象，需有相同的操作，比如，所有的整数对象，都可以进行加减乘除操作，所有字符可以进行切片操作
python是一种动态强类型的编程语言
动态：运行时检测变量的类型
强类型：类型的严格检查，不支持即不允许隐式类型转换
类似的，C语言是一种静态弱类型语言，java的类型检查更为严格，一般认为是静态强类型，javascript是动态弱类型
eg:
    Static_Strong:java/c#Scala
    Static_Weak:c/c++
    Dynamic_strong:python/Ruby/Magik/Groovy/Erlang
    Dynamic_weak:vb/javascript/php
'''
#标准类型
'''
整形、浮点型、复数型、布尔型、字符串型、列表、元组（不可修改）、字典(key可以是很广泛的，一般数字，字符串，value一般类型都可以)
强制类型转换：a=1，------>    float(a)
'''
#其他内建类型
'''
类型、NULL对象（None）、文件、函数、模块、类
'''
#类型的类型
'''
类型也是对象，类型也是一种类型(type(type)/id(type)
'''
#认识None
'''
python的一种特殊类型，NoneType，这是类型的一个对象，叫做None，type(None)--->  NoneType;
NoneType类似于C语言的void，None类似于C语言的空指针NULL，None这个对象没有啥有用的属性，布尔值为False
'''
#内建类型的布尔值
'''
所有的标准对象，均可以用于布尔测试(放if条件中)

下面对象的布尔值是False：{None,False,所有值为0的数字(0,0.0,0.0+0.0j),""(空字符串)，()(空元祖)，{}（空字典）}
其他情况下，这些内建对象的布尔值就是True
'''
#对象值得比较
'''
所有内建类型对象都可以进行比较操作来进行值得比较（双方类型必须相同），python2这块还不够完善，不同类型可以进行比较的
比较运算结果为Treu、False
比较运算符包括==，!=,<,>,<=,>=
'''

#对象身份的比较
'''
对于变量名只是对象的一个引用，对于多个变量名是否指向同一对象可以用id函数来判断，如果id相同说明就是一个对象
python还提供 is  关键字 直接判断是否指向同一对象  print a is  b
另外，还有is not直接判断是否指向不同的对象 print a is not b

'''

#对象类型的比较
'''
对象比较类型是否相同，可以使用内建函数type（）
        print type(1) == type（1.1）
上面调用两次type，可以进行优化，一次肯定效率更高，
    import types
    a = 1
    print type(a) == types.IntType
python还提供了一个内建函数isinstance
    a=[]
    print isinstance(a,list)

    a = 100
    print isinstance(a,type(100))

'''
